<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.demo.member.model.mapper.MemberMapper">
    <!-- 이메일 중복 체크 -->
    <select id="checkEmail">
        select count(*)
        from member
        where member_email = #{email}
    </select>
    <!-- 이메일로 아이디 찾기 -->
    <select id="findId" resultType="string">
        select member_id
        from member
        where member_email = #{email}
    </select>

    <!-- 아이디 이메일 일치여부 확인 -->
    <select id="confirmIdEmail" resultType="_int">
        select count(*)
        from member
        where member_email = #{memberEmail}
        and member_id = #{memberId}
    </select>

    <!-- 비밀번호 재설정 -->
    <update id="resetPwd">
        update member
        set member_pwd = #{memberPwd}
        where member_email = #{memberEmail}
        and member_id = #{memberId}
    </update>

    <!-- 로그인 처리 -->
    <select id="login" parameterType="map" resultType="com.example.demo.member.model.vo.Member">
        select *
        from member
        where member_id = #{memberId}
        and member_status = 'Y'
    </select>

    <!-- 회원가입 쿼리 -->
    <insert id="insertMember" parameterType="com.example.demo.member.model.vo.Member">
	    insert into member (
	        member_id, member_pwd, member_gender, member_phone, member_email, 
	        member_nickname, member_birth, member_status, is_admin, member_createdate
	    )
	    values (
	        #{memberId}, #{memberPwd}, #{memberGender}, #{memberPhone}, #{memberEmail}, 
	        #{memberNickname}, #{memberBirth}, 'Y', #{memberIsAdmin}, sysdate
	    )
	</insert>
    
    <!-- 아이디 중복 체크 -->
    <select id="checkMemberId" resultType="int">
	    select count(*)
	    from member
	    where member_id = #{memberId}
	</select>
	
	<!-- 닉네임 중복 체크 -->
	<select id="checkMemberNickname" resultType="int">
	    select count(*)
	    from member
	    where member_nickname = #{memberNickname}
	</select>
	
	<!-- 전화번호 중복 체크 -->
	<select id="checkMemberPhone" resultType="int">
	    select count(*)
	    from member
	    where member_phone = #{memberPhone}
	</select>
	
	<!-- 이메일 중복 체크 -->
	<select id="checkMemberEmail" resultType="int">
	    select count(*)
	    from member
	    where member_email = #{memberEmail}
	</select>
 
    <!-- 친구 목록 가져오기 (번호만) -->
    <select id="selectFriendNumbers">
        select friend_member_no
        from friend
        where member_no = #{memberNo} and friend_status='A'
        union
        select member_no
        from friend
        where friend_member_no = #{memberNo} and friend_status='A'
    </select>

    <!-- 내가 보낸 친구 요청 목록 가져오기 (번호만)-->
    <select id="selectRequestSent">
        select friend_member_no
        from friend
        where member_no = #{memberNo}
        and friend_status = 'W'
    </select>

    <!-- 내가 받은 친구 요청 목록 가져오기(번호만)-->
    <select id="selectRequestReceived">
        select member_no
        from friend
        where friend_member_no = #{memberNo}
        and friend_status = 'W'
    </select>

    <!-- 친구 목록 조회  -->
    <select id="selectFriends" resultType="Member">
        select * from member where member_no in(
        <foreach collection="list" item="number" separator="," index="i">
            #{number}
        </foreach>
        )
    </select>

    <!-- 친구 거절, 삭제, 요청 취소 -->
    <delete id="deleteFriend">
        delete from friend
        where (member_no = #{myMemberNo} and friend_member_no = #{friendMemberNo})
        or (member_no = #{friendMemberNo} and friend_member_no = #{myMemberNo})
    </delete>

    <!-- 친구 수락 -->
    <update id="approveRequest">
        update friend
        set friend_status='A'
        where ((member_no = #{myMemberNo} and friend_member_no = #{friendMemberNo})
                or (member_no = #{friendMemberNo} and friend_member_no = #{myMemberNo}))
            and friend_status='W'
    </update>

    <!-- 회원 찾기 (친구 추가) -->
    <select id="findMember">
        select *
        from (select * 
            from member
            where member_id like '%${search}%'
                or member_nickname like '%${search}%')
			<!-- 이미 친구 테이블에 있는 회원은 제외  -->
        where member_no not in (
	            select friend_member_no
	            from friend
	            where member_no = #{myMemberNo}
	            union
	            select member_no
	            from friend
	            where friend_member_no = #{myMemberNo}
        		)
        	<!-- 본인 제외 -->
        	and member_no != #{myMemberNo}
    </select>
    
    <!-- 친구관계 확인 -->
	<select id="friendCheck" resultType="hashmap">
		select *
		from friend
		where (member_no = #{myMemberNo} and friend_member_no = #{friendMemberNo})
			or (member_no = #{friendMemberNo} and friend_member_no = #{myMemberNo})
	</select>
	
	<!-- 친구 요청 -->
	<insert id="requestFriend">
		insert into friend
		values(
			friend_seq.nextval,
			#{myMemberNo},
			#{friendMemberNo},
			default
		)
	</insert>
</mapper>
